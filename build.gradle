plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.hibernate.orm' version '6.5.3.Final'
    id 'org.graalvm.buildtools.native' version '0.10.3'
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
}

group = 'io.nomard'
version = '0.0.21-SNAPSHOT'

java {
    sourceCompatibility = '22'
}

graalvmNative {
    toolchainDetection = true

    agent {
        defaultMode = "standard"
        enabled = true

        modes {
            standard {
            }
        }

        builtinCallerFilter = true
        builtinHeuristicFilter = true
        enableExperimentalPredefinedClasses = true
        enableExperimentalUnsafeAllocationTracing = true
        trackReflectionMetadata = true
    }

    binaries {
        main {
            debug = false
            verbose = false
            fallback = false
            sharedLibrary = false
            quickBuild = false
            richOutput = false
            buildArgs.add("-O4")
            buildArgs.add('-H:+UnlockExperimentalVMOptions')
            buildArgs.add('-H:+RemoveSaturatedTypeFlows')
//            buildArgs.add('-H:+RemoveDeadNodes')
            buildArgs.add('-H:-ReportExceptionStackTraces')
            // buildArgs.add('--link-at-build-time')
            runtimeArgs.add('--help')
        }
    }

    binaries.configureEach {
        // buildArgs.add('--verbose')
        resources.autodetect()
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

bootJar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

dependencies {
    implementation('com.flutterwave:f4b-java:3.0.1F') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    // PDF Creation
    implementation 'io.github.openhtmltopdf:openhtmltopdf-pdfbox:1.1.22'
    // JSON Creation
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.0'
    // JWT
    implementation 'com.auth0:java-jwt:4.4.0'
    // SpringBoot Starters
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // Dev Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // SpringBoot Configurations
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    // JB Annotations
    implementation 'org.realityforge.org.jetbrains.annotations:org.jetbrains.annotations:1.7.0'
    // Containerization Tools
    runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'
    // Database
    runtimeOnly 'org.postgresql:postgresql'
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // Testing
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

hibernate {
    enhancement {
        enableAssociationManagement = true
    }
}

